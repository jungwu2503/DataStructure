import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

public class Main {

	public static void main(String[] args) throws IOException {
		
		Calculator cal1 = new Calculator();
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		System.out.print("계산할 식을 넣으시오 : ");
		
		String infix = br.readLine();
		
		String postfix = cal1.convert(infix);
		
		System.out.println("Postfix 변환 값은 : " + postfix);
		System.out.println("위 값의 계산 값은 : " + cal1.evalu(postfix));
		
	}

}

class Calculator {
	
	public static String convert(String infix) {
		
		Stack<String>Opstack = new Stack();
		
		String postfix = "";
		String[] Split = infix.split("");
		
		for (String one : Split) {
			
			switch (one) {
				case "0":
				case "1":
				case "2":
				case "3":
				case "4":
				case "5":
				case "6":
				case "7":
				case "8":
				case "9":
					postfix += one;
					break;
				case "+":
				case "-":
					if (Opstack.isEmpty()) {
						Opstack.push(one);
						break;
					}
					else if ("+".equalsIgnoreCase(Opstack.peek()) || "-".equalsIgnoreCase(Opstack.peek())) {
						postfix += Opstack.pop();
						Opstack.push(one);
						break;
					}
					else if ("*".equalsIgnoreCase(Opstack.peek()) || "/".equalsIgnoreCase(Opstack.peek())) {
						while (!Opstack.isEmpty()) {
							if ("(".equalsIgnoreCase(Opstack.peek()))
								break;
							postfix += Opstack.pop();
						}
						Opstack.push(one);
						break;
					}
					else 
						Opstack.push(one);
					break;
				case "*" :
				case "/" :
					if (Opstack.isEmpty()) {
						Opstack.push(one);
						break;
					}
					else if ("+".equalsIgnoreCase(Opstack.peek()) || "-".equalsIgnoreCase(Opstack.peek())) {
						Opstack.push(one);
						break;
					}
					else if ("*".equalsIgnoreCase(Opstack.peek()) || "/".equalsIgnoreCase(Opstack.peek())) {
						postfix += Opstack.pop();
						Opstack.push(one);
						break;
					}
					else
						Opstack.push(one);
					break;
				case "(" :
					Opstack.push(one);
					break;
				case ")" :
					while (!Opstack.isEmpty()) {
						if ("(".equalsIgnoreCase(Opstack.peek())) {
							Opstack.pop();
							break;
						}
						postfix += Opstack.pop();
					}
					break;
				default:
					System.out.println("잘못된 값");
					return "에러";
			}
			
		}
		
		while (!Opstack.isEmpty())
			postfix += Opstack.pop();
		return postfix;
		
	}
	
	public static int evalu(String postfix) {
		
		String[] split = postfix.split("");
		Stack<Integer>Numbers = new Stack();
		int temp1, temp2;
		
		for (String one : split) {
			
			switch (one) {
				case "0":
				case "1":
				case "2":
				case "3":
				case "4":
				case "5":
				case "6":
				case "7":
				case "8":
				case "9":
					int intone = Integer.parseInt(one);
					Numbers.push(intone);
					break;
				case "+":
					temp2 = (int)Numbers.pop();
					temp1 = (int)Numbers.pop();
					Numbers.push((int)temp1+temp2);
					break;
				case "-":
					temp2 = (int)Numbers.pop();
					temp1 = (int)Numbers.pop();
					Numbers.push((int)temp1-temp2);
					break;
				case "*":
					temp2 = (int)Numbers.pop();
					temp1 = (int)Numbers.pop();
					Numbers.push((int)temp1*temp2);
					break;
				case "/":
					temp2 = (int)Numbers.pop();
					temp1 = (int)Numbers.pop();
					Numbers.push((int)temp1/temp2);
					break;
				default:
					System.out.println("잘못된 계산");
					return -1;
			}
			
		}
		return (int)Numbers.pop();
		
	}
	
}
